format_version: 1.3.1
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - STEP_VERSION: 2.3.9

  - SAMPLE_APP_URL: "https://github.com/bitrise-samples/BitriseFastlaneSample.git"
  - LANE: test

workflows:
  # ----------------------------------------------------------------
  # --- workflow to test this step
  fastlane:
    before_run:
    - _install-test-tools
    steps:
    - script:
        title: Test Fastlane Stuff
        inputs:
        - content: |-
            #!/bin/bash 
            sed -ie 's/DEVELOPMENT_TEAM = ""/DEVELOPMENT_TEAM = EH7S44QJTM/g' Calculator.xcodeproj/project.pbxproj
            sed -ie 's/IPHONEOS_DEPLOYMENT_TARGET = 5.1;/IPHONEOS_DEPLOYMENT_TARGET = 10.0;/g' Calculator.xcodeproj/project.pbxproj
            fastlane update_fastlane
            mkdir fastlane
            cd fastlane 
            rm Fastfile
            touch Fastfile
            echo "default_platform :ios
              platform :ios do
                lane :setup do
                  
                  gym(output_directory: './')  
                  #produce(username: 'grace@hatchapps.com', app_name: 'grace bitrise calc', app_identifier: 'com.gracev2.app')
                  cert(username: 'grace@hatchapps.com')
                  sigh(username: 'grace@hatchapps.com', app_identifier: 'com.gracev2.app')
                              
                  
                end
              " >> Fastfile

            echo "
                  lane :release do
                    deliver(username: 'grace@hatchapps.com', app_identifier: 'com.gracev2.app', force: true, submission_information: {
                          add_id_info_serves_ads: false,
                          export_compliance_contains_third_party_cryptography: false,
                          export_compliance_encryption_updated: false,
                          add_id_info_uses_idfa: false,
                          content_rights_contains_third_party_content: false
                    })
                  end
            end" >> Fastfile
            cd ..
            
            fastlane setup
            fastlane release
            
  ci:
    before_run:
    - go-tests
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v
            rm -rf ./_tmp
    - git-clone:
        run_if: true
        inputs:
        - repository_url: $SAMPLE_APP_URL
        - clone_into_dir: ./_tmp
        - commit: ""
        - tag: ""
        - branch: master
        - branch_dest: ""
        - pull_request_id: ""
        - pull_request_repository_url: ""
        - pull_request_merge_branch: ""
        - build_url: ""
        - build_api_token: ""
    - change-workdir:
        title: Switch working dir to test/_tmp dir
        run_if: true
        inputs:
        - path: ./_tmp
        - is_create_path: true
    - path::./:
        inputs:
        - lane: $LANE

  go-tests:
    before_run:
    - _install-test-tools
    steps:
    - script:
        title: Export go files to test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Err check
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go lint
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Go test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            go test ./...

  _install-test-tools:
    steps:
    - script:
        title: Install required testing tools
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            # Check for unhandled errors
            go get -u -v github.com/kisielk/errcheck

            # Go lint
            go get -u -v github.com/golang/lint/golint

  # ----------------------------------------------------------------
  # --- Utility workflows
  godeps-update:
    title: Godeps update
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            go get -u -v github.com/tools/godep

            rm -rf ./Godeps
            rm -rf ./vendor

            go get -t -d ./...
            godep save ./...

  # ----------------------------------------------------------------
  # --- workflows to create Release
  create-release:
    title: Create release with Releaseman
    steps:
    - script:
        title:
        inputs:
        - content: |
            #!/bin/bash
            set -e

            export CI=true
            releaseman create --version $STEP_VERSION

  # ----------------------------------------------------------------
  # --- workflows to Share this step into a Step Library
  audit-this-step:
    title: Audit the step
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml

  share-this-step:
    envs:
      # if you want to share this step into a StepLib
      - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
      - STEP_ID_IN_STEPLIB: fastlane
      - STEP_GIT_VERION_TAG_TO_SHARE: $STEP_VERSION
      - STEP_GIT_CLONE_URL: https://github.com/bitrise-io/steps-fastlane.git
    title: Share the step
    description: |-
      If this is the first time you try to share a Step you should
      first call: $ bitrise share

      This will print you a guide, and information about how Step sharing
      works. Please read it at least once!

      As noted in the Step sharing guide you'll have to fork the
      StepLib you want to share this step into. Once you're done with forking
      the repository you should set your own fork's git clone URL
      in the `.bitrise.secrets.yml` file, or here in the `envs` section,
      as the value of the `MY_STEPLIB_REPO_FORK_GIT_URL` environment.

      You're now ready to share this Step, just make sure that
      the `STEP_ID_IN_STEPLIB` and `STEP_GIT_VERION_TAG_TO_SHARE`
      environments are set to the desired values!

      To share this Step into a StepLib you can just run: $ bitrise run share-this-step

      Once it finishes the only thing left is to actually create a Pull Request,
      the way described in the guide printed at the end of the process.
    before_run:
    - audit-this-step
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            bitrise share start -c ${MY_STEPLIB_REPO_FORK_GIT_URL}
            bitrise share create --stepid ${STEP_ID_IN_STEPLIB} --tag ${STEP_GIT_VERION_TAG_TO_SHARE} --git ${STEP_GIT_CLONE_URL}
            bitrise share finish
